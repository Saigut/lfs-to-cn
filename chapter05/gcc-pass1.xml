<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-gcc-pass1" role="wrap">
  <?dbhtml filename="gcc-pass1.html"?>

  <sect1info condition="script">
    <productname>gcc</productname>
    <productnumber>&gcc-version;</productnumber>
    <address>&gcc-url;</address>
  </sect1info>

  <title>GCC-&gcc-version; - 第一遍</title>

  <indexterm zone="ch-tools-gcc-pass1">
    <primary sortas="a-GCC">GCC</primary>
    <secondary>工具、第一遍</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../chapter06/gcc.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&gcc-ch5p1-sbu;</seg>
        <seg>&gcc-ch5p1-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装交叉 GCC</title>

    <para>GCC 现在需求 GMP、MPFR 和 MPC 程序包。由于这些程序包可能未包含与你的宿主发行版中，它们将与 GCC 一同编制。将每个程序包解包至 GCC 源代码目录并重命名产生的文件夹使得 GCC 编制过程能够自动使用他们：</para>

    <note><para>关于这一节经常出现误解。此过程与其他每一节都是一样的，就像之前在 <xref linkend='buildinstr'/> 中解释的那样。首先从源代码目录中提取 GCC 压缩包然后改变到创建的目录，再继续运行以下指令。</para></note>

<screen><userinput remap="pre">tar -Jxf ../mpfr-&mpfr-version;.tar.xz
mv -v mpfr-&mpfr-version; mpfr
tar -Jxf ../gmp-&gmp-version;.tar.xz
mv -v gmp-&gmp-version; gmp
tar -zxf ../mpc-&mpc-version;.tar.gz
mv -v mpc-&mpc-version; mpc</userinput></screen>

    <para>以下命令将改变 GCC 的默认动态链接器位置以使用安装于 <filename class="directory">/tools</filename> 的副本。它也会从 GCC 的包含搜索路径中移除 <filename class="directory">/usr/include</filename>。执行：</para>

<screen><userinput remap="pre">for file in \
 $(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&amp;@g' \
      -e 's@/usr@/tools@g' $file.orig &gt; $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' &gt;&gt; $file
  touch $file.orig
done</userinput></screen>

    <para>由于上文似乎很难跟进，我们把它拆解开来。首先我们找到 <filename class="directory">gcc/config</filename> 目录中所有名为 <filename>linux.h</filename>、<filename>linux64.h</filename> 或者 <filename>sysv4.h</filename> 的文件。对于找到的每个文件，我们把它复制为一个有同样名字但是加上 <quote>.orig</quote> 后缀。然后第一个 <command>sed</command> 表达式将出现的所有 <filename>/lib/ld</filename>、<filename>/lib64/ld</filename> 或 <filename>/lib32/ld</filename> 替换为 <filename class="directory">/tools</filename>，第二个替换不可更改的 <filename class="directory">/usr</filename>。然后我们在文件末尾添加我们的声明，调节包含搜索路径和起始文件前缀。最后我们用 <command>touch</command> 来更新复制的文件的时间戳。在与 <command>cp -u</command> 联用时这可以防止由于误操作将命令运行两次而改变原有文件。</para>
    
    <para>GCC 不能正确检测堆栈保护，会导致 Glibc-&glibc-version; 编制时出现问题。应用以下命令修复之：</para>

<screen><userinput remap="pre">sed -i '/k prot/agcc_cv_libc_provides_ssp=yes' gcc/configure</userinput></screen>

<para>不要构建 .info 文件。这些文件在新版 <command>makeinfo</command> 下无法正常编译，而且我们也不会用到。</para>

<screen><userinput remap="pre">sed -i 's/BUILD_INFO=info/BUILD_INFO=/' gcc/configure</userinput></screen>

    <para>GCC 文档推荐在源代码目录外创建目录编制 GCC：</para>

<screen><userinput remap="pre">mkdir -v ../gcc-build
cd ../gcc-build</userinput></screen>

    <para>准备编译 GCC：</para>

<screen><userinput remap="configure">../gcc-&gcc-version;/configure         \
    --target=$LFS_TGT          \
    --prefix=/tools            \
    --with-sysroot=$LFS        \
    --with-newlib              \
    --without-headers          \
    --with-local-prefix=/tools \
    --with-native-system-header-dir=/tools/include \
    --disable-nls              \
    --disable-shared           \
    --disable-multilib         \
    --disable-decimal-float    \
    --disable-threads          \
    --disable-libmudflap       \
    --disable-libssp           \
    --disable-libgomp          \
    --disable-libquadmath      \
    --enable-languages=c       \
    --with-mpfr-include=$(pwd)/../gcc-&gcc-version;/mpfr/src \
    --with-mpfr-lib=$(pwd)/mpfr/src/.libs</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>
      
      <varlistentry>
        <term><parameter>--with-newlib</parameter></term>
        <listitem>
          <para>由于现在还没有能够工作的 C 库可用，此项确保编制 <filename class="libraryfile">libgcc</filename> 时 inhibit_libc 常量是已经定义了的。此项防止编译任何需要 libc 支持的代码。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--without-headers</parameter></term>
        <listitem>
          <para>在创建一个完整的交叉编译器的时候，GCC 需要兼容于目标系统的标准头文件。出于我们的目的，不需要这些头文件。此开关防止 GCC 寻找它们。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-local-prefix=/tools</parameter></term>
        <listitem>
          <para>本地前缀是系统中 GCC 搜索本地安装的包含文件的位置。默认值是 <filename>/usr/local</filename>。设置它为 <filename>/tools</filename> 帮助保持宿主上的 <filename>/usr/local</filename> 在 GCC 的搜索路径之外。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-native-system-header-dir=/tools/include</parameter></term>
        <listitem>
          <para>GCC 默认搜索 <filename class="directory">/usr/include</filename> 寻找系统头文件。与 <parameter>sysroot</parameter> 开关联用时，它通常会被翻译为 <filename class="directory">$LFS/usr/include</filename>。然而下两节将要安装的头文件会去往 <filename class="directory">$LFS/tools/include</filename>。此开关确保 gcc 会正确地找到他们。在第二遍的 GCC 中，相同的开关将会确保不会找到宿主上的头文件。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-shared</parameter></term>
        <listitem>
          <para>此开关强制 GCC 静态链接内部库以防止可能出现的有关宿主系统的问题。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-decimal-float, --disable-threads, --disable-libmudflap, --disable-libssp, --disable-libgomp, --disable-libquadmath</parameter></term>
        <listitem>
          <para>这些开关禁用十进制浮点扩展、线程、<filename class="libraryfile">libmudflap</filename>、<filename class="libraryfile">libssp</filename>、<filename class="libraryfile">libgomp</filename> 和 <filename class="libraryfile">libquadmath</filename> 的支持。这些特性在编制交叉编译器时会编译失败，而且对于交叉编译临时的 libc 没有必要。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-multilib</parameter></term>
        <listitem>
          <para>在 x86_64 上，LFS 还不支持多重库配置。此开关对 x86 是无害的。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-languages=c</parameter></term>
        <listitem>
          <para>此选项确保只编制 C 编译器。这是目前需要的唯一的语言。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>运行以下命令编译 GCC：</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>编译现在完成了。通常我们现在要运行测试套件，但现阶段测试套件框架 (Tcl、Expect 和 DejaGNU) 还没有到位。在这里运行测试意义不大，因为这第一遍编译的程序很快会被第二遍的替换掉。</para>

    <para>安装程序包：</para>

<screen><userinput remap="install">make install</userinput></screen>

    <para>使用 <parameter>--disable-shared</parameter> 意味着 <filename class="libraryfile">libgcc_eh.a</filename> 文件不会创建和安装。Glibc 程序包因为在自己的编制系统中使用了 <parameter>-lgcc_eh</parameter> 而依赖这个库。此项依赖关系可以通过创建一个到 <filename>libgcc.a</filename> 的符号链接来满足，因为这个文件最后会包含通常包含在 <filename>libgcc_eh.a</filename> 中的对象。</para>

<screen><userinput remap="install">ln -sv libgcc.a `$LFS_TGT-gcc -print-libgcc-file-name | \
sed 's/libgcc/&amp;_eh/'`</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>有关此程序包的细节位于 <xref linkend="contents-gcc"/>。</para>

  </sect2>

</sect1>
