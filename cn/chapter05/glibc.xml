<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-glibc" role="wrap">
  <?dbhtml filename="glibc.html"?>

  <sect1info condition="script">
    <productname>glibc</productname>
    <productnumber>&glibc-version;</productnumber>
    <address>&glibc-url;</address>
  </sect1info>

  <title>Glibc-&glibc-version;</title>

  <indexterm zone="ch-tools-glibc">
    <primary sortas="a-Glibc">Glibc</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../chapter06/glibc.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&glibc-ch5-sbu;</seg>
        <seg>&glibc-ch5-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Glibc</title>

    <para>在某些情况下，尤其是在 LFS 7.1 中，rpc 头文件并没有被正确安装。检测它们在宿主系统上是否已经安装，如果没有则安装它们：</para>

<screen><userinput remap="pre">if [ ! -r /usr/include/rpc/types.h ]; then
  su -c 'mkdir -pv /usr/include/rpc'
  su -c 'cp -v sunrpc/rpc/*.h /usr/include/rpc'
fi</userinput></screen>

    <para>Glibc 文档建议在源代码目录外的一个专用目录中构建 Glibc：</para>

<screen><userinput remap="pre">mkdir -v ../glibc-build
cd ../glibc-build</userinput></screen>
<!--
    <para>Because Glibc no longer supports i386, its developers say to use the
    compiler flag <parameter>-march=i486</parameter> when building it for x86
    machines. There are several ways to accomplish that, but testing shows that
    the flag is best placed inside the build variable <quote>CFLAGS</quote>.
    Instead of overriding completely what Glibc's internal build system uses
    for CFLAGS, append the new flag to the existing contents of CFLAGS by
    making use of the special file <filename>configparms</filename>. The
    -mtune=native flag is also necessary to reset a reasonable value for -mtune
    that is changed when setting -march.</para>

<screen><userinput remap="configure">case `uname -m` in
  i?86) echo "CFLAGS += -march=i486 -mtune=native" &gt; configparms ;;
esac</userinput></screen>
-->

    <para>接下来，准备编译 Glibc：</para>

<screen><userinput remap="configure">../glibc-&glibc-version;/configure                             \
      --prefix=/tools                               \
      --host=$LFS_TGT                               \
      --build=$(../glibc-&glibc-version;/scripts/config.guess) \
      --disable-profile                             \
      --enable-kernel=&min-kernel;                        \
      --with-headers=/tools/include                 \
      libc_cv_forced_unwind=yes                     \
      libc_cv_ctors_header=yes                      \
      libc_cv_c_cleanup=yes</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter>--host=$LFS_TGT, --build=$(../glibc-&glibc-version;/scripts/config.guess)</parameter></term>
        <listitem>
          <para>这几个选项的作用是让  Glibc 使用 <filename class="directory">/tools</filename> 中的编译器和链接器进行交叉编译。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-profile</parameter></term>
        <listitem>
          <para>不使用检测信息进行构建。如果需要检测临时工具，则去掉这个选项。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-kernel=&min-kernel;</parameter></term>
        <listitem>
          <para>这告诉 Glibc 提供 &min-kernel; 或更新内核的支持。比这个旧的内核将不会提供支持。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-headers=/tools/include</parameter></term>
        <listitem>
          <para>这告诉 Glibc 使用 tools 目录里新安装的头文件来编译自己，这样它能知道内核有什么特性，从而能优化自己。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>libc_cv_forced_unwind=yes</parameter></term>
        <listitem>
          <para><xref linkend="ch-tools-binutils-pass1"/> 中安装的链接器是被交叉编译的，因此直到 Glibc 被安装后才能使用。这意味着对 force-unwind 的支持的配置测试会失败，因为它依赖一个工作着的链接器。libc_cv_forced_unwind=yes 告诉 <command>configure</command> 对 force-unwind 是支持的，而不用去测试。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>libc_cv_c_cleanup=yes</parameter></term>
        <listitem>
          <para>同样地，我们传递 libc_cv_c_cleanup=yes 给 <command>configure</command> 脚本以跳过测试，C 清理支持被设置好了。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>libc_cv_ctors_header=yes</parameter></term>
        <listitem>
          <para>同样地，我们传递  libc_cv_ctors_header=yes 给 <command>configure</command> 脚本以跳过测试，gcc 构造函数支持被设置好了。Simlarly, we pass libc_cv_ctors_header=yes through to the
          <command>configure</command> script so that the test is skipped and
          gcc constructor support is configured.</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>在这步进行时，可能会有下面的警告：</para>

    <blockquote>
<screen><computeroutput>configure: WARNING:
*** These auxiliary programs are missing or
*** incompatible versions: msgfmt
*** some features will be disabled.
*** Check the INSTALL file for required versions.</computeroutput></screen>
    </blockquote>

    <para>这个丢失的或不兼容的 <command>msgfmt</command> 程序通常是无害的。这个 <command>msgfmt</command> 程序是 Gettext 包的一部分，宿主系统应该要提供。</para>

    <para>编译软件包：</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>这个软件包的确有一个组件，然而它现在还不能运行，因为我们目前还没有 C++ 编译器。</para>

    <note>
      <para>测试组件的成功运行也需要 locale 数据。locale 数据提供系统的日期、时间和货币格式等信息，用于系统工具的输出。如果不在本章运行测试组件（像每个建议的那样），现在就不需要安装 locale。适当的 locale 会在下一章安装。如果还是要现在安装 Glibc locale 的话，用 <xref linkend="ch-system-glibc" role="."/>中的指令。</para>
    </note>

    <para>安装软件包：</para>

<screen><userinput remap="install">make install</userinput></screen>

  <caution>
    <para>在这里，停下来并确保新工具链的基本功能 (编译和链接) 能正常工作很重要。要进行检查，运行以下命令：</para>

<screen><userinput>echo 'main(){}' &gt; dummy.c
$LFS_TGT-gcc dummy.c
readelf -l a.out | grep ': /tools'</userinput></screen>

    <para>如果一切工作正常，就不会出现错误，最后一条命令的输出会类似这样：</para>

<screen><computeroutput>[Requesting program interpreter: /tools/lib/ld-linux.so.2]</computeroutput></screen>

    <para>注意，<filename class="directory">/tools/lib</filename>，或 64 位机器的 <filename class="directory">/tools/lib64</filename> 会作为动态链接器的前缀出现。</para>

    <para>如果输出不想上面那样或根本没有输出，那就是哪里错了。研究回溯前面步骤，找出问题并更正。在继续进行后面的之前，这个问题必须要解决掉。</para>

    <para>一切正常之后，清理测试文件：</para>

<screen><userinput>rm -v dummy.c a.out</userinput></screen>

  </caution>

  <note><para>下下节构建 Binutils 也会作为工具链是否被正常构建的附加检查。如果 Binutils 构建失败，就说明前面的 Binutils、GCC 或 Glibc 的安装出现了问题。</para></note>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>这个包的详细信息位于 <xref linkend="contents-glibc" role="."/></para>

  </sect2>

</sect1>
